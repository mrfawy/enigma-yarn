/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.tito.enigma.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RotorConfig extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1828127895131705335L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RotorConfig\",\"namespace\":\"com.tito.enigma.avro\",\"fields\":[{\"name\":\"map\",\"type\":\"bytes\"},{\"name\":\"notchSet\",\"type\":\"bytes\"},{\"name\":\"offset\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.nio.ByteBuffer map;
  @Deprecated public java.nio.ByteBuffer notchSet;
  @Deprecated public int offset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RotorConfig() {}

  /**
   * All-args constructor.
   */
  public RotorConfig(java.nio.ByteBuffer map, java.nio.ByteBuffer notchSet, java.lang.Integer offset) {
    this.map = map;
    this.notchSet = notchSet;
    this.offset = offset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return map;
    case 1: return notchSet;
    case 2: return offset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: map = (java.nio.ByteBuffer)value$; break;
    case 1: notchSet = (java.nio.ByteBuffer)value$; break;
    case 2: offset = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'map' field.
   */
  public java.nio.ByteBuffer getMap() {
    return map;
  }

  /**
   * Sets the value of the 'map' field.
   * @param value the value to set.
   */
  public void setMap(java.nio.ByteBuffer value) {
    this.map = value;
  }

  /**
   * Gets the value of the 'notchSet' field.
   */
  public java.nio.ByteBuffer getNotchSet() {
    return notchSet;
  }

  /**
   * Sets the value of the 'notchSet' field.
   * @param value the value to set.
   */
  public void setNotchSet(java.nio.ByteBuffer value) {
    this.notchSet = value;
  }

  /**
   * Gets the value of the 'offset' field.
   */
  public java.lang.Integer getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.Integer value) {
    this.offset = value;
  }

  /**
   * Creates a new RotorConfig RecordBuilder.
   * @return A new RotorConfig RecordBuilder
   */
  public static com.tito.enigma.avro.RotorConfig.Builder newBuilder() {
    return new com.tito.enigma.avro.RotorConfig.Builder();
  }
  
  /**
   * Creates a new RotorConfig RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RotorConfig RecordBuilder
   */
  public static com.tito.enigma.avro.RotorConfig.Builder newBuilder(com.tito.enigma.avro.RotorConfig.Builder other) {
    return new com.tito.enigma.avro.RotorConfig.Builder(other);
  }
  
  /**
   * Creates a new RotorConfig RecordBuilder by copying an existing RotorConfig instance.
   * @param other The existing instance to copy.
   * @return A new RotorConfig RecordBuilder
   */
  public static com.tito.enigma.avro.RotorConfig.Builder newBuilder(com.tito.enigma.avro.RotorConfig other) {
    return new com.tito.enigma.avro.RotorConfig.Builder(other);
  }
  
  /**
   * RecordBuilder for RotorConfig instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RotorConfig>
    implements org.apache.avro.data.RecordBuilder<RotorConfig> {

    private java.nio.ByteBuffer map;
    private java.nio.ByteBuffer notchSet;
    private int offset;

    /** Creates a new Builder */
    private Builder() {
      super(com.tito.enigma.avro.RotorConfig.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.tito.enigma.avro.RotorConfig.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.map)) {
        this.map = data().deepCopy(fields()[0].schema(), other.map);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.notchSet)) {
        this.notchSet = data().deepCopy(fields()[1].schema(), other.notchSet);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.offset)) {
        this.offset = data().deepCopy(fields()[2].schema(), other.offset);
        fieldSetFlags()[2] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing RotorConfig instance
     * @param other The existing instance to copy.
     */
    private Builder(com.tito.enigma.avro.RotorConfig other) {
            super(com.tito.enigma.avro.RotorConfig.SCHEMA$);
      if (isValidValue(fields()[0], other.map)) {
        this.map = data().deepCopy(fields()[0].schema(), other.map);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.notchSet)) {
        this.notchSet = data().deepCopy(fields()[1].schema(), other.notchSet);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.offset)) {
        this.offset = data().deepCopy(fields()[2].schema(), other.offset);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'map' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getMap() {
      return map;
    }

    /**
      * Sets the value of the 'map' field.
      * @param value The value of 'map'.
      * @return This builder.
      */
    public com.tito.enigma.avro.RotorConfig.Builder setMap(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.map = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'map' field has been set.
      * @return True if the 'map' field has been set, false otherwise.
      */
    public boolean hasMap() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'map' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.RotorConfig.Builder clearMap() {
      map = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'notchSet' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getNotchSet() {
      return notchSet;
    }

    /**
      * Sets the value of the 'notchSet' field.
      * @param value The value of 'notchSet'.
      * @return This builder.
      */
    public com.tito.enigma.avro.RotorConfig.Builder setNotchSet(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.notchSet = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'notchSet' field has been set.
      * @return True if the 'notchSet' field has been set, false otherwise.
      */
    public boolean hasNotchSet() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'notchSet' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.RotorConfig.Builder clearNotchSet() {
      notchSet = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * @return The value.
      */
    public java.lang.Integer getOffset() {
      return offset;
    }

    /**
      * Sets the value of the 'offset' field.
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public com.tito.enigma.avro.RotorConfig.Builder setOffset(int value) {
      validate(fields()[2], value);
      this.offset = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'offset' field has been set.
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'offset' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.RotorConfig.Builder clearOffset() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public RotorConfig build() {
      try {
        RotorConfig record = new RotorConfig();
        record.map = fieldSetFlags()[0] ? this.map : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.notchSet = fieldSetFlags()[1] ? this.notchSet : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.offset = fieldSetFlags()[2] ? this.offset : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
