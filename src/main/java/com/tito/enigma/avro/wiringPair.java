/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.tito.enigma.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class wiringPair extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4467469212542146939L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"wiringPair\",\"namespace\":\"com.tito.enigma.avro\",\"fields\":[{\"name\":\"from\",\"type\":\"int\"},{\"name\":\"to\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int from;
  @Deprecated public int to;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public wiringPair() {}

  /**
   * All-args constructor.
   */
  public wiringPair(java.lang.Integer from, java.lang.Integer to) {
    this.from = from;
    this.to = to;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return from;
    case 1: return to;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: from = (java.lang.Integer)value$; break;
    case 1: to = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'from' field.
   */
  public java.lang.Integer getFrom() {
    return from;
  }

  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(java.lang.Integer value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'to' field.
   */
  public java.lang.Integer getTo() {
    return to;
  }

  /**
   * Sets the value of the 'to' field.
   * @param value the value to set.
   */
  public void setTo(java.lang.Integer value) {
    this.to = value;
  }

  /**
   * Creates a new wiringPair RecordBuilder.
   * @return A new wiringPair RecordBuilder
   */
  public static com.tito.enigma.avro.wiringPair.Builder newBuilder() {
    return new com.tito.enigma.avro.wiringPair.Builder();
  }
  
  /**
   * Creates a new wiringPair RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new wiringPair RecordBuilder
   */
  public static com.tito.enigma.avro.wiringPair.Builder newBuilder(com.tito.enigma.avro.wiringPair.Builder other) {
    return new com.tito.enigma.avro.wiringPair.Builder(other);
  }
  
  /**
   * Creates a new wiringPair RecordBuilder by copying an existing wiringPair instance.
   * @param other The existing instance to copy.
   * @return A new wiringPair RecordBuilder
   */
  public static com.tito.enigma.avro.wiringPair.Builder newBuilder(com.tito.enigma.avro.wiringPair other) {
    return new com.tito.enigma.avro.wiringPair.Builder(other);
  }
  
  /**
   * RecordBuilder for wiringPair instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<wiringPair>
    implements org.apache.avro.data.RecordBuilder<wiringPair> {

    private int from;
    private int to;

    /** Creates a new Builder */
    private Builder() {
      super(com.tito.enigma.avro.wiringPair.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.tito.enigma.avro.wiringPair.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.from)) {
        this.from = data().deepCopy(fields()[0].schema(), other.from);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.to)) {
        this.to = data().deepCopy(fields()[1].schema(), other.to);
        fieldSetFlags()[1] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing wiringPair instance
     * @param other The existing instance to copy.
     */
    private Builder(com.tito.enigma.avro.wiringPair other) {
            super(com.tito.enigma.avro.wiringPair.SCHEMA$);
      if (isValidValue(fields()[0], other.from)) {
        this.from = data().deepCopy(fields()[0].schema(), other.from);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.to)) {
        this.to = data().deepCopy(fields()[1].schema(), other.to);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'from' field.
      * @return The value.
      */
    public java.lang.Integer getFrom() {
      return from;
    }

    /**
      * Sets the value of the 'from' field.
      * @param value The value of 'from'.
      * @return This builder.
      */
    public com.tito.enigma.avro.wiringPair.Builder setFrom(int value) {
      validate(fields()[0], value);
      this.from = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'from' field has been set.
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'from' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.wiringPair.Builder clearFrom() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * @return The value.
      */
    public java.lang.Integer getTo() {
      return to;
    }

    /**
      * Sets the value of the 'to' field.
      * @param value The value of 'to'.
      * @return This builder.
      */
    public com.tito.enigma.avro.wiringPair.Builder setTo(int value) {
      validate(fields()[1], value);
      this.to = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'to' field has been set.
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'to' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.wiringPair.Builder clearTo() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public wiringPair build() {
      try {
        wiringPair record = new wiringPair();
        record.from = fieldSetFlags()[0] ? this.from : (java.lang.Integer) defaultValue(fields()[0]);
        record.to = fieldSetFlags()[1] ? this.to : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
