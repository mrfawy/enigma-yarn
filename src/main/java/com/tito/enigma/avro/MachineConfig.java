/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.tito.enigma.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MachineConfig extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9196780741678690885L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MachineConfig\",\"namespace\":\"com.tito.enigma.avro\",\"fields\":[{\"name\":\"reflectorConfig\",\"type\":\"bytes\"},{\"name\":\"plugBaordWiring\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"wiringPair\",\"fields\":[{\"name\":\"from\",\"type\":\"int\"},{\"name\":\"to\",\"type\":\"int\"}]}}},{\"name\":\"rotorConfigs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"rotorConfig\",\"fields\":[{\"name\":\"map\",\"type\":\"bytes\"},{\"name\":\"notchSet\",\"type\":\"bytes\"},{\"name\":\"offset\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.nio.ByteBuffer reflectorConfig;
  @Deprecated public java.util.List<com.tito.enigma.avro.wiringPair> plugBaordWiring;
  @Deprecated public java.util.List<com.tito.enigma.avro.rotorConfig> rotorConfigs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public MachineConfig() {}

  /**
   * All-args constructor.
   */
  public MachineConfig(java.nio.ByteBuffer reflectorConfig, java.util.List<com.tito.enigma.avro.wiringPair> plugBaordWiring, java.util.List<com.tito.enigma.avro.rotorConfig> rotorConfigs) {
    this.reflectorConfig = reflectorConfig;
    this.plugBaordWiring = plugBaordWiring;
    this.rotorConfigs = rotorConfigs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return reflectorConfig;
    case 1: return plugBaordWiring;
    case 2: return rotorConfigs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: reflectorConfig = (java.nio.ByteBuffer)value$; break;
    case 1: plugBaordWiring = (java.util.List<com.tito.enigma.avro.wiringPair>)value$; break;
    case 2: rotorConfigs = (java.util.List<com.tito.enigma.avro.rotorConfig>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'reflectorConfig' field.
   */
  public java.nio.ByteBuffer getReflectorConfig() {
    return reflectorConfig;
  }

  /**
   * Sets the value of the 'reflectorConfig' field.
   * @param value the value to set.
   */
  public void setReflectorConfig(java.nio.ByteBuffer value) {
    this.reflectorConfig = value;
  }

  /**
   * Gets the value of the 'plugBaordWiring' field.
   */
  public java.util.List<com.tito.enigma.avro.wiringPair> getPlugBaordWiring() {
    return plugBaordWiring;
  }

  /**
   * Sets the value of the 'plugBaordWiring' field.
   * @param value the value to set.
   */
  public void setPlugBaordWiring(java.util.List<com.tito.enigma.avro.wiringPair> value) {
    this.plugBaordWiring = value;
  }

  /**
   * Gets the value of the 'rotorConfigs' field.
   */
  public java.util.List<com.tito.enigma.avro.rotorConfig> getRotorConfigs() {
    return rotorConfigs;
  }

  /**
   * Sets the value of the 'rotorConfigs' field.
   * @param value the value to set.
   */
  public void setRotorConfigs(java.util.List<com.tito.enigma.avro.rotorConfig> value) {
    this.rotorConfigs = value;
  }

  /**
   * Creates a new MachineConfig RecordBuilder.
   * @return A new MachineConfig RecordBuilder
   */
  public static com.tito.enigma.avro.MachineConfig.Builder newBuilder() {
    return new com.tito.enigma.avro.MachineConfig.Builder();
  }
  
  /**
   * Creates a new MachineConfig RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MachineConfig RecordBuilder
   */
  public static com.tito.enigma.avro.MachineConfig.Builder newBuilder(com.tito.enigma.avro.MachineConfig.Builder other) {
    return new com.tito.enigma.avro.MachineConfig.Builder(other);
  }
  
  /**
   * Creates a new MachineConfig RecordBuilder by copying an existing MachineConfig instance.
   * @param other The existing instance to copy.
   * @return A new MachineConfig RecordBuilder
   */
  public static com.tito.enigma.avro.MachineConfig.Builder newBuilder(com.tito.enigma.avro.MachineConfig other) {
    return new com.tito.enigma.avro.MachineConfig.Builder(other);
  }
  
  /**
   * RecordBuilder for MachineConfig instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MachineConfig>
    implements org.apache.avro.data.RecordBuilder<MachineConfig> {

    private java.nio.ByteBuffer reflectorConfig;
    private java.util.List<com.tito.enigma.avro.wiringPair> plugBaordWiring;
    private java.util.List<com.tito.enigma.avro.rotorConfig> rotorConfigs;

    /** Creates a new Builder */
    private Builder() {
      super(com.tito.enigma.avro.MachineConfig.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.tito.enigma.avro.MachineConfig.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.reflectorConfig)) {
        this.reflectorConfig = data().deepCopy(fields()[0].schema(), other.reflectorConfig);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.plugBaordWiring)) {
        this.plugBaordWiring = data().deepCopy(fields()[1].schema(), other.plugBaordWiring);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rotorConfigs)) {
        this.rotorConfigs = data().deepCopy(fields()[2].schema(), other.rotorConfigs);
        fieldSetFlags()[2] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing MachineConfig instance
     * @param other The existing instance to copy.
     */
    private Builder(com.tito.enigma.avro.MachineConfig other) {
            super(com.tito.enigma.avro.MachineConfig.SCHEMA$);
      if (isValidValue(fields()[0], other.reflectorConfig)) {
        this.reflectorConfig = data().deepCopy(fields()[0].schema(), other.reflectorConfig);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.plugBaordWiring)) {
        this.plugBaordWiring = data().deepCopy(fields()[1].schema(), other.plugBaordWiring);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rotorConfigs)) {
        this.rotorConfigs = data().deepCopy(fields()[2].schema(), other.rotorConfigs);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'reflectorConfig' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getReflectorConfig() {
      return reflectorConfig;
    }

    /**
      * Sets the value of the 'reflectorConfig' field.
      * @param value The value of 'reflectorConfig'.
      * @return This builder.
      */
    public com.tito.enigma.avro.MachineConfig.Builder setReflectorConfig(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.reflectorConfig = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'reflectorConfig' field has been set.
      * @return True if the 'reflectorConfig' field has been set, false otherwise.
      */
    public boolean hasReflectorConfig() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'reflectorConfig' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.MachineConfig.Builder clearReflectorConfig() {
      reflectorConfig = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'plugBaordWiring' field.
      * @return The value.
      */
    public java.util.List<com.tito.enigma.avro.wiringPair> getPlugBaordWiring() {
      return plugBaordWiring;
    }

    /**
      * Sets the value of the 'plugBaordWiring' field.
      * @param value The value of 'plugBaordWiring'.
      * @return This builder.
      */
    public com.tito.enigma.avro.MachineConfig.Builder setPlugBaordWiring(java.util.List<com.tito.enigma.avro.wiringPair> value) {
      validate(fields()[1], value);
      this.plugBaordWiring = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'plugBaordWiring' field has been set.
      * @return True if the 'plugBaordWiring' field has been set, false otherwise.
      */
    public boolean hasPlugBaordWiring() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'plugBaordWiring' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.MachineConfig.Builder clearPlugBaordWiring() {
      plugBaordWiring = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rotorConfigs' field.
      * @return The value.
      */
    public java.util.List<com.tito.enigma.avro.rotorConfig> getRotorConfigs() {
      return rotorConfigs;
    }

    /**
      * Sets the value of the 'rotorConfigs' field.
      * @param value The value of 'rotorConfigs'.
      * @return This builder.
      */
    public com.tito.enigma.avro.MachineConfig.Builder setRotorConfigs(java.util.List<com.tito.enigma.avro.rotorConfig> value) {
      validate(fields()[2], value);
      this.rotorConfigs = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'rotorConfigs' field has been set.
      * @return True if the 'rotorConfigs' field has been set, false otherwise.
      */
    public boolean hasRotorConfigs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rotorConfigs' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.MachineConfig.Builder clearRotorConfigs() {
      rotorConfigs = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public MachineConfig build() {
      try {
        MachineConfig record = new MachineConfig();
        record.reflectorConfig = fieldSetFlags()[0] ? this.reflectorConfig : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.plugBaordWiring = fieldSetFlags()[1] ? this.plugBaordWiring : (java.util.List<com.tito.enigma.avro.wiringPair>) defaultValue(fields()[1]);
        record.rotorConfigs = fieldSetFlags()[2] ? this.rotorConfigs : (java.util.List<com.tito.enigma.avro.rotorConfig>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
