/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.tito.enigma.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EnigmaKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3857369258135720210L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnigmaKey\",\"namespace\":\"com.tito.enigma.avro\",\"fields\":[{\"name\":\"machineOrder\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"machineConfig\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"MachineConfig\",\"fields\":[{\"name\":\"reflectorConfig\",\"type\":\"bytes\"},{\"name\":\"plugBaordWiring\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"wiringPair\",\"fields\":[{\"name\":\"from\",\"type\":\"int\"},{\"name\":\"to\",\"type\":\"int\"}]}}},{\"name\":\"rotorConfigs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"rotorConfig\",\"fields\":[{\"name\":\"map\",\"type\":\"bytes\"},{\"name\":\"notchSet\",\"type\":\"bytes\"},{\"name\":\"offset\",\"type\":\"int\"}]}}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.CharSequence> machineOrder;
  @Deprecated public java.util.Map<java.lang.CharSequence,com.tito.enigma.avro.MachineConfig> machineConfig;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public EnigmaKey() {}

  /**
   * All-args constructor.
   */
  public EnigmaKey(java.util.List<java.lang.CharSequence> machineOrder, java.util.Map<java.lang.CharSequence,com.tito.enigma.avro.MachineConfig> machineConfig) {
    this.machineOrder = machineOrder;
    this.machineConfig = machineConfig;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return machineOrder;
    case 1: return machineConfig;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: machineOrder = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: machineConfig = (java.util.Map<java.lang.CharSequence,com.tito.enigma.avro.MachineConfig>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'machineOrder' field.
   */
  public java.util.List<java.lang.CharSequence> getMachineOrder() {
    return machineOrder;
  }

  /**
   * Sets the value of the 'machineOrder' field.
   * @param value the value to set.
   */
  public void setMachineOrder(java.util.List<java.lang.CharSequence> value) {
    this.machineOrder = value;
  }

  /**
   * Gets the value of the 'machineConfig' field.
   */
  public java.util.Map<java.lang.CharSequence,com.tito.enigma.avro.MachineConfig> getMachineConfig() {
    return machineConfig;
  }

  /**
   * Sets the value of the 'machineConfig' field.
   * @param value the value to set.
   */
  public void setMachineConfig(java.util.Map<java.lang.CharSequence,com.tito.enigma.avro.MachineConfig> value) {
    this.machineConfig = value;
  }

  /**
   * Creates a new EnigmaKey RecordBuilder.
   * @return A new EnigmaKey RecordBuilder
   */
  public static com.tito.enigma.avro.EnigmaKey.Builder newBuilder() {
    return new com.tito.enigma.avro.EnigmaKey.Builder();
  }
  
  /**
   * Creates a new EnigmaKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnigmaKey RecordBuilder
   */
  public static com.tito.enigma.avro.EnigmaKey.Builder newBuilder(com.tito.enigma.avro.EnigmaKey.Builder other) {
    return new com.tito.enigma.avro.EnigmaKey.Builder(other);
  }
  
  /**
   * Creates a new EnigmaKey RecordBuilder by copying an existing EnigmaKey instance.
   * @param other The existing instance to copy.
   * @return A new EnigmaKey RecordBuilder
   */
  public static com.tito.enigma.avro.EnigmaKey.Builder newBuilder(com.tito.enigma.avro.EnigmaKey other) {
    return new com.tito.enigma.avro.EnigmaKey.Builder(other);
  }
  
  /**
   * RecordBuilder for EnigmaKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnigmaKey>
    implements org.apache.avro.data.RecordBuilder<EnigmaKey> {

    private java.util.List<java.lang.CharSequence> machineOrder;
    private java.util.Map<java.lang.CharSequence,com.tito.enigma.avro.MachineConfig> machineConfig;

    /** Creates a new Builder */
    private Builder() {
      super(com.tito.enigma.avro.EnigmaKey.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.tito.enigma.avro.EnigmaKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.machineOrder)) {
        this.machineOrder = data().deepCopy(fields()[0].schema(), other.machineOrder);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.machineConfig)) {
        this.machineConfig = data().deepCopy(fields()[1].schema(), other.machineConfig);
        fieldSetFlags()[1] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing EnigmaKey instance
     * @param other The existing instance to copy.
     */
    private Builder(com.tito.enigma.avro.EnigmaKey other) {
            super(com.tito.enigma.avro.EnigmaKey.SCHEMA$);
      if (isValidValue(fields()[0], other.machineOrder)) {
        this.machineOrder = data().deepCopy(fields()[0].schema(), other.machineOrder);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.machineConfig)) {
        this.machineConfig = data().deepCopy(fields()[1].schema(), other.machineConfig);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'machineOrder' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getMachineOrder() {
      return machineOrder;
    }

    /**
      * Sets the value of the 'machineOrder' field.
      * @param value The value of 'machineOrder'.
      * @return This builder.
      */
    public com.tito.enigma.avro.EnigmaKey.Builder setMachineOrder(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.machineOrder = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'machineOrder' field has been set.
      * @return True if the 'machineOrder' field has been set, false otherwise.
      */
    public boolean hasMachineOrder() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'machineOrder' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.EnigmaKey.Builder clearMachineOrder() {
      machineOrder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'machineConfig' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,com.tito.enigma.avro.MachineConfig> getMachineConfig() {
      return machineConfig;
    }

    /**
      * Sets the value of the 'machineConfig' field.
      * @param value The value of 'machineConfig'.
      * @return This builder.
      */
    public com.tito.enigma.avro.EnigmaKey.Builder setMachineConfig(java.util.Map<java.lang.CharSequence,com.tito.enigma.avro.MachineConfig> value) {
      validate(fields()[1], value);
      this.machineConfig = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'machineConfig' field has been set.
      * @return True if the 'machineConfig' field has been set, false otherwise.
      */
    public boolean hasMachineConfig() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'machineConfig' field.
      * @return This builder.
      */
    public com.tito.enigma.avro.EnigmaKey.Builder clearMachineConfig() {
      machineConfig = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public EnigmaKey build() {
      try {
        EnigmaKey record = new EnigmaKey();
        record.machineOrder = fieldSetFlags()[0] ? this.machineOrder : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.machineConfig = fieldSetFlags()[1] ? this.machineConfig : (java.util.Map<java.lang.CharSequence,com.tito.enigma.avro.MachineConfig>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
